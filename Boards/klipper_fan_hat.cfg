[mcu rpi]
#####################################################################
# Compile the Klipper micro-controller code for "Linux process"
#####################################################################
serial: /tmp/klipper_host_mcu
##--------------------------------------------------------------------

[static_digital_output status_led]
pins: rpi:gpio16

#####################################################################
#      Fans
#####################################################################

# For hardware PWM add one of the following to `/boot/config.txt`:
# dtoverlay=pwm-2chan,pin=18,pin2=19,func=2,func2=2
# dtoverlay=pwm-2chan,pin=12,pin2=13,func=4,func2=4

# add the following to /etc/rc.local before exit 0:
# echo 0 > /sys/class/pwm/pwmchip0/export
# echo 1 > /sys/class/pwm/pwmchip0/export

# Then enable `hardware_pwm` on the selected pins

[fan_generic fan1]
pin: rpi:gpio18
#pin: rpi:pwmchip0/pwm0
hardware_pwm: false

[fan_generic fan2]
pin: rpi:gpio12
#pin: rpi:pwmchip0/pwm0
hardware_pwm: false

[fan_generic fan3]
pin: rpi:gpio19
#pin: rpi:pwmchip0/pwm1
hardware_pwm: false

[fan_generic fan4]
pin: rpi:gpio13
#pin: rpi:pwmchip0/pwm1
hardware_pwm: false

# Control the Pi fan by host temperature
[temperature_fan raspberry_pi]
pin: rpi:gpio17
sensor_type: temperature_host
min_temp: 10
max_temp: 100
target_temp: 35
control: pid
pid_kp: 1.0
pid_ki: 0.5
pid_kd: 2.0

#####################################################################
#      I2C
#####################################################################

# Example1: Using the I2C bus with an OLED Display
#[display]
#lcd_type: sh1106
#i2c_mcu: rpi
#i2c_bus: i2c.1
#x_offset: 1 # Shift the display towards the right
# If not using GPIO pins below you can attach a rotary encoder:
#click_pin: ^!rpi:gpio4
#encoder_pins: ^rpi:gpio5, ^rpi:gpio6

# Example2: Using the I2C bus to read a HTU21D sensor
#[temperature_sensor enclosure_temp]
#sensor_type: HTU21D
#i2c_mcu: rpi
#i2c_bus: i2c.1

#[gcode_macro QUERY_ENCLOSURE]
#gcode:
#    {% set sensor = printer["htu21d enclosure_temp"] %}
#    {action_respond_info(
#        "Temperature: %.2f C\n"
#        "Humidity: %.2f%%" % (
#            sensor.temperature,
#            sensor.humidity))}

#####################################################################
#      1-wire & GPIO
#####################################################################

# GPIO4 is the default pin for 1-Wire sensors
[output_pin gpio4]
pin: rpi:gpio4
value: 0
shutdown_value: 0

# Example1: Using 1-wire DS18B20 temperature sensor
# To enable 1-wire add the following to `/boot/config.txt`:
# dtoverlay=w1-gpio
#[temperature_sensor enclosure_temp]
#sensor_type: DS18B20
#serial_no: 28-031674b175ff # Find with: ls /sys/bus/w1/devices/
#ds18_report_time: 3.0 # Seconds between readings, minimum of 1.0
#sensor_mcu: rpi

[output_pin gpio5]
pin: rpi:gpio5
value: 0
shutdown_value: 0

[output_pin gpio6]
pin: rpi:gpio6
value: 0
shutdown_value: 0

# Example2: Using pin as filament sensor
#[filament_switch_sensor filament_sensor]
#pause_on_runout: true
#switch_pin: ^!rpi:gpio5

#####################################################################
#      SPI
#####################################################################

# Example: Using the SPI bus of the RPi with an AXDL345 Accelerometer
#[adxl345]
#cs_pin: rpi:None

#[resonance_tester]
#accel_chip: adxl345
#probe_points: 150, 150, 20 # an example
