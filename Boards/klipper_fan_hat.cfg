[mcu rpi]
#####################################################################
# Compile the Klipper micro-controller code for "Linux process"
#####################################################################
serial: /tmp/klipper_host_mcu
##--------------------------------------------------------------------

# Show host temperature graph
[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

# Use status LED to indicate when klipper connects
[static_digital_output statusLED]
pins: rpi:gpio16

#####################################################################
#      Fans
#####################################################################

# To enable Hardware PWM add the following to `/boot/config.txt`:
# dtoverlay=pwm,pin=18,func=2

# or for 2 Channel PWM:
# dtoverlay=pwm-2chan,pin=18,pin2=19,func=2,func2=2

# PWM0 can be routed to gpio12 using func 4 and gpio18 using func 2
# PWM1 can be routed to gpio13 using func 4 and gpio19 using func 2

# You can then enable `hardware_pwm` on the selected pin

[fan_generic fan1]
pin: rpi:gpio18
hardware_pwm: False

[fan_generic fan2]
pin: rpi:gpio12
hardware_pwm: False

[fan_generic fan3]
pin: rpi:gpio19
hardware_pwm: False

[fan_generic fan4]
pin: rpi:gpio13
hardware_pwm: False

# Control the Pi cooling fan by host temperature
[temperature_fan fan5]
pin: rpi:gpio17
sensor_type: temperature_host
min_temp: 10
max_temp: 100
target_temp: 35
control: pid
pid_kp: 1.0
pid_ki: 0.5
pid_kd: 2.0

#####################################################################
#      GPIO
#####################################################################

# GPIO4 is the default pin for 1-Wire sensors
[output_pin gpio4]
pin: rpi:gpio4
value: 0
shutdown_value: 0

[output_pin gpio5]
pin: rpi:gpio5
value: 0
shutdown_value: 0

[output_pin gpio6]
pin: rpi:gpio6
value: 0
shutdown_value: 0

# Example: Using pin as filament sensor
#[filament_switch_sensor filament_sensor]
#pause_on_runout: False
#switch_pin: ^!rpi:gpio4

#####################################################################
#      I2C
#####################################################################

# Example1: Using the I2C bus of the RPi with an OLED Display
#[display]
#lcd_type: sh1106
#i2c_mcu: rpi
#i2c_bus: i2c.1
#x_offset: 1 # Use X offset to shift the display towards the right
# If not using GPIO pins above you can attach a rotary encoder here:
#click_pin: ^!rpi:gpio4
#encoder_pins: ^rpi:gpio5, ^rpi:gpio6

# Example2: Using the I2C bus of the RPi to read a HTU21D sensor
#[temperature_sensor enclosure_temp]
#sensor_type: HTU21D
#i2c_mcu: host
#i2c_bus: i2c.1
#htu21d_hold_master: False

#[gcode_macro QUERY_ENCLOSURE]
#gcode:
#    {% set sensor = printer["htu21d enclosure_temp"] %}
#    {action_respond_info(
#        "Temperature: %.2f C\n"
#        "Humidity: %.2f%%" % (
#            sensor.temperature,
#            sensor.humidity))}

#####################################################################
#      SPI
#####################################################################

# Example: Using the SPI bus of the RPi with an AXDL345 Accelerometer
#[adxl345]
#cs_pin: rpi:None

#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#    150, 150, 20  # an example
